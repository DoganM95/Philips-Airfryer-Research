#logging.properties file.


#AppInfraLoglevel   JavaLogLevel
#ERROR              SEVERE
#WARNING            WARNING
#INFO               INFO
#DEBUG              CONFIG
#VERBOSE            FINE

# ------------------------------------------
# Global logging properties.
# ------------------------------------------

# (? LogManager docs say no comma here, but JDK example has comma.)
#handlers=java.util.logging.FileHandler java.util.logging.ConsoleHandler

# Default global logging level.
# Loggers and Handlers may override this level
.level=FINE
#Do not modify it

#---------------------------------------------
# ---Loggers---
# ------------------------------------------
# Each component must initialize their log by their component root package name
# eg appInfra.getLogging().createInstanceForComponent("philips.di.cl.appframework.UiKit", "3.1.0");
# Here, the level for each package is specified.The global level is used by default, so levels.specified here simply act as an override.
# Above created component log can be filtered at different log level
# eg philips.di.cl.appframework.UiKit.level=WARNING   // only WARNING and ERROR log will output
# eg philips.di.cl.appframework.UiKit.level=OFF       // No log output for this component
# eg philips.di.cl.appframework.UiKit.level=FINE      // All five level ERROR, WARNING, INFO, DEBUG, INFO  log output

#package1.component1.level=WARNING
#package2.component2.level=OFF
# ------------------------------------------



# Handlers
# -----------------------------------------
# ---ConsoleHandler---
# -----------------------------------------
# Override of global logging level
java.util.logging.ConsoleHandler.level=FINE
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
#java.util.logging.ConsoleHandler.formatter=com.philips.platform.appinfra.logging.LogFormatter #handlers=  com.android.internal.logging.AndroidHandler



# -----------------------------------------
# --- FileHandler ---
# -----------------------------------------
# By default we only configure a FileHandler, which will only
# show messages at the INFO and above levels.
# This file location and property is common for all component
java.util.logging.FileHandler.pattern = AppInfra%u.log
# each file size 2 MB
java.util.logging.FileHandler.limit =2097152
java.util.logging.FileHandler.count = 5
java.util.logging.FileHandler.append =true
java.util.logging.FileHandler.level = INFO
#java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter


# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers. For any given facility this global level
# can be overriden by a facility-specific level.
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.



# Limit the messages that are printed on the console to INFO and above.

    #java.util.logging.ConsoleHandler.level = FINE
    #java.util.logging.ConsoleHandler.formatter =  java.util.logging.SimpleFormatter

# The logger with javax.jms.connection name space will write
# Level.INFO messages to its output handler(s). In this configuration
# the ouput handler is set to java.util.logging.ConsoleHandler.

#com.android.internal.logging.AndroidHandler.level = FINE
#com.android.internal.logging.AndroidHandler.formatter = java.util.logging.SimpleFormatter

